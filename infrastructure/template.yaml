AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Voice-Assisted AI Coding Prototype

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]

Globals:
  Function:
    Runtime: python3.11
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        AUDIO_BUCKET: !Ref AudioBucket
        CONVERSATION_TABLE: !Ref ConversationTable

Resources:
  # S3 Bucket for temporary audio storage
  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-audio-${Environment}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter1Day
            Status: Enabled
            ExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB for conversation history
  ConversationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-conversations-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Lambda function for voice processing
  VoiceProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-voice-processor-${Environment}"
      CodeUri: ../src/
      Handler: voice_processor.lambda_handler
      Policies:
        - S3ReadWritePolicy:
            BucketName: !Ref AudioBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationTable
        - Statement:
            - Effect: Allow
              Action:
                - transcribe:StartTranscriptionJob
                - transcribe:GetTranscriptionJob
                - polly:SynthesizeSpeech
                - bedrock:InvokeModel
              Resource: "*"

  # API Gateway
  VoiceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-voice-api-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type, Authorization'"
        AllowOrigin: "'*'"

  # API Gateway endpoint for voice processing
  VoiceProcessorApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-voice-api-${Environment}"
      CodeUri: ../src/
      Handler: api_handler.lambda_handler
      Events:
        VoiceProcess:
          Type: Api
          Properties:
            RestApiId: !Ref VoiceApi
            Path: /process-voice
            Method: post
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref VoiceProcessorFunction

  # S3 bucket for static website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-website-${Environment}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket policy for public read access
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${WebsiteBucket}/*"

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${VoiceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
  WebsiteURL:
    Description: Static website URL
    Value: !GetAtt WebsiteBucket.WebsiteURL
  AudioBucket:
    Description: S3 bucket for audio files
    Value: !Ref AudioBucket
  ConversationTable:
    Description: DynamoDB table for conversations
    Value: !Ref ConversationTable